tags: published ssa isa
title: 2020-11-01 Известно, что в компиляторе IR выбирается таким образом,...
type: text/x-markdown

Автор: Peter Sovietov

Известно, что в компиляторе IR выбирается таким образом, чтобы облегчить порождение кода для выбранного класса целевых архитектур. Но бывает ли так, чтобы уже само абстрактное IR оказывало влияние на набор команд процессора? Оказывается, и такое существует, причем речь здесь не идет о предметно-ориентированном наборе команд или поддержке конструкций входного языка. Ниже два характерных примера.

**BasicBlocker: Redesigning ISAs to Eliminate Speculative-Execution Attacks**
[https://arxiv.org/pdf/2007.15919.pdf](https://arxiv.org/pdf/2007.15919.pdf)

В этой работе предлагается добавить к ISA процессора специальную команду, отмечающую начало линейного участка (basic block) с указанием его длины. Это нужно для предотвращения Spectre-подобных атак. Здесь мы видим, как черты абстрактного управляющего графа (CFG) проступают в машинном коде.

**Hardware Acceleration for Programs in SSA Form**
[https://pp.ipd.kit.edu/uploads/publikationen/mohr13cases.pdf](https://pp.ipd.kit.edu/uploads/publikationen/mohr13cases.pdf)

В современных компиляторах форму SSA стараются сохранять настолько долго, насколько возможно, включая и фазу распределения регистров. Тем не менее, в какой-то момент из формы SSA приходится выходить и выход это достаточно болезнен, поскольку требует формирования дополнительных машинных команд. Особенно это касается phi-инструкций, имитировать которые приходится с помощью команд, заменяющих параллельные копирования/перестановки регистровых значений. А если попробовать реализовать phi-инструкцию аппаратным образом? При этом вместо реального копирования часто можно обойтись перестановками, которые на аппаратном уровне заключаются в переименовании регистров. Здесь в ISA процессора появляются черты абстрактной phi-инструкции из формы SSA.

